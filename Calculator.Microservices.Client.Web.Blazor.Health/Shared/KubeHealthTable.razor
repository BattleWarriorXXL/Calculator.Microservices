@using Calculator.Microservices.Shared.Library.HealthCheck

<div id="accordion">
    @foreach (var report in Reports)
    {
        <div class="card">
            <div class="card-header">
                <h5 class="mb-0">
                    <button class="btn @GetStatusColor(report.Value.Status) w-100 d-flex justify-content-between" @onclick="() => Toggle(report.Key)">
                        <span>
                            @report.Key
                        </span>
                        <span>
                            @report.Value.Status
                        </span>
                    </button>
                </h5>
            </div>

            <div id="@report.Key" class="collapse @Toggles[report.Key]">
                <div class="card-body">
                    <table class="table">
                        <thead>
                            <tr>
                                <td style="width: 70%">
                                    Name
                                </td>
                                <td>
                                    Status
                                </td>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in report.Value.Entries)
                            {
                                <tr class="@GetStatusColor(item.PodStatus)">
                                    <td>
                                        @item.Name
                                    </td>
                                    <td>
                                        @item.PodStatus
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public IReadOnlyDictionary<string, UIKubernetesHealthReport> Reports { get; set; }

    private Dictionary<string, string> Toggles { get; set; } = new();

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        foreach (var report in Reports)
        {
            Toggles.TryAdd(report.Key, string.Empty);
        }
    }

    private void Toggle(string id)
    {
        if (Toggles.ContainsKey(id))
        {
            Toggles[id] = Toggles[id] == "show" ? string.Empty : "show";
        }
    }

    private string GetStatusColor(KubernetesStatus status)
    {
        return status switch
        {
            KubernetesStatus.Failed => "btn-danger",
            KubernetesStatus.Pending => "btn-warning",
            KubernetesStatus.Running => "btn-success",
            _ => string.Empty
        };
    }

    private string GetStatusColor(string status)
    {
        return status switch
        {
            "Failed" => "btn-danger",
            "Unknown" => "btn-danger",
            "Running" => string.Empty,
            _ => "btn-warning"
        };
    }
}
