@page "/calculator"
@using Calculator.Microservices.Client.Web.Services
@using Calculator.Microservices.Shared.IntegrationEvents.Events
@using Calculator.Microservices.Shared.Library
@implements IDisposable
@inject IEventBus EventBus
@inject IMessageService MessageService

<PageTitle>Calculator Bitch</PageTitle>

<h3>Calculator Bitch</h3>

<div class="input-group mb-3">
  <span class="input-group-text">a =</span>
  <input @bind-value="A" @bind-value:event="oninput" type="text" class="form-control" placeholder="Type the number">

  <input type="radio" class="btn-check" name="operator" id="btn-1" autocomplete="off" @onclick='() => SelectedOperator = "+"' checked>
  <label class="btn btn-outline-success" for="btn-1"><span class="oi oi-plus"></span></label><br>

  <input type="radio" class="btn-check" name="operator" id="btn-2" autocomplete="off" @onclick='() => SelectedOperator = "-"'>
  <label class="btn btn-outline-success" for="btn-2"><span class="oi oi-minus"></span></label><br>

  <input type="radio" class="btn-check" name="operator" id="btn-3" autocomplete="off" @onclick='() => SelectedOperator = "*"'>
  <label class="btn btn-outline-success" for="btn-3"><span class="oi oi-x"></span></label>

  <input type="radio" class="btn-check" name="operator" id="btn-4" autocomplete="off" @onclick='() => SelectedOperator = "/"'>
  <label class="btn btn-outline-success" for="btn-4"><span class="oi oi-italic"></span></label>

  <span class="input-group-text">b =</span>
  <input @bind-value="B" @bind-value:event="oninput" type="text" class="form-control" placeholder="Type the number">
</div>

<div class="input-group mb-3">
  <button class="btn alert-primary w-100" @onclick="Execute">Execute</button>
</div>

<div class="input-group mb-3">
  <span class="input-group-text">c =</span>
  <input type="text" class="form-control" placeholder="None" @bind-value="Result" disabled>
</div>

@code {
    private double? A { get; set; } = null;
    private double? B { get; set; } = null;
    private string? Result { get; set; } = null;
    private string SelectedOperator { get; set; } = "+";

    protected override void OnInitialized()
    {
        base.OnInitialized();
        MessageService.Subscribe(ShowResult);
    }

    private void ShowResult(object message)
    {
        if (message != null && message is string result)
        {
            Result = result;
            InvokeAsync(() => StateHasChanged());
        }
    }

    private void Execute()
    {
        if (A == null || B == null)
        {
            return;
        }

        switch (SelectedOperator)
        {
            case "+":
                EventBus.Publish(new AddIntegrationEvent(A.Value, B.Value));
                break;
            case "-":
                EventBus.Publish(new SubtractIntegrationEvent(A.Value, B.Value));
                break;
            case "*":
                EventBus.Publish(new MultiplyIntegrationEvent(A.Value, B.Value));
                break;
            case "/":
                EventBus.Publish(new DivideIntegrationEvent(A.Value, B.Value));
                break;
            default:
                return;
        }
    }

    public void Dispose()
    {
        MessageService.Unsubscribe(ShowResult);
    }
}
